# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 동작 조건 설정: main, develop 브랜치에 pull request이 merge될 경우 동작
on:
  pull_request:
    types:
      - closed
    branches: [ "main", "develop"]

jobs:
  # Spring boot 애플리케이션을 빌드하여 도커 허브에 푸시하는 과정
  build:
    if: github.event.pull_request.merged == true
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      # 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4
    
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.yml 생성
      - name: Create application.yml
        run: |
          mkdir ./src/main/resources || true
          cd ./src/main/resources
          rm -rf ./application.yml || true
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode  > ./application.yml
        shell: bash

      # application-oauth2.yml 생성
      - name: Create application-oauth.yml
        run: |
          mkdir ./src/main/resources || true
          cd ./src/main/resources
          rm -rf ./application-oauth2.yml || true
          echo "${{ secrets.APPLICATION_OAUTH2_YML }}" | base64 --decode > ./application-oauth.yml
        shell: bash

      # gradlew 권한 문제로 인한 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # iplan-firebase.json 생성
      - name: create firebase key
        run: |
          cd ./src/main/resources
          touch ./iplan-firebase.json
          echo "${{ secrets.FIREBASE_KEY }}" > ./iplan-firebase.json
        shell: bash

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar --no-daemon --warning-mode all

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/iplan-demo .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/iplan-demo

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-reports
          path: build/reports

      # 6. 배포 자동화: Docker Hub에서 이미지 가져와서 EC2에 배포 (추후 추가예정)